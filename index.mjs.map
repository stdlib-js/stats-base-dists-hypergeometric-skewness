{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer' ;\nimport sqrt from '@stdlib/math-base-special-sqrt' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\n\n\n// MAIN //\n\n/**\n* Returns the skewness of a hypergeometric distribution.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {number} skewness\n*\n* @example\n* var v = skewness( 16, 11, 4 );\n* // returns ~-0.258\n*\n* @example\n* var v = skewness( 4, 2, 2 );\n* // returns 0.0\n*\n* @example\n* var v = skewness( 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 10.3, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 10, 5.5, 4 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 10, 5, 4.5 );\n* // returns NaN\n*\n* @example\n* var v = skewness( NaN, 10, 4 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 20, NaN, 4 );\n* // returns NaN\n*\n* @example\n* var v = skewness( 20, 10, NaN );\n* // returns NaN\n*/\nfunction skewness( N, K, n ) {\n\tvar p;\n\tvar q;\n\tif (\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\tp = ( N - (2*K) ) * sqrt( N - 1 ) * ( N - (2*n) );\n\tq = sqrt( n * K * ( N-K ) * ( N-n ) ) * ( N - 2 );\n\treturn p / q;\n}\n\n\n// EXPORTS //\n\nexport default skewness;\n"],"names":["skewness","N","K","n","isNonNegativeInteger","PINF","NaN","sqrt"],"mappings":";;+RAyEA,SAASA,EAAUC,EAAGC,EAAGC,GAGxB,OACEC,EAAsBH,KACtBG,EAAsBF,KACtBE,EAAsBD,IACvBF,IAAMI,GACNH,IAAMG,GACNH,EAAID,GACJE,EAAIF,EAEGK,KAEFL,EAAK,EAAEC,GAAOK,EAAMN,EAAI,IAAQA,EAAK,EAAEE,IACzCI,EAAMJ,EAAID,GAAMD,EAAEC,IAAQD,EAAEE,KAAUF,EAAI"}